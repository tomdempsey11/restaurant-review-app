<%- include('../partials/header', { title: title || 'Restaurant', user }) %>

<section class="container container--narrow page-section">
  <a id="backLink" class="back-link" href="/restaurants">← Back to Browse</a>

  <div id="restaurant"></div>

  <hr class="divider">

  <div class="row-between mb-2">
    <h3 class="m-0">Reviews</h3>

    <% if (!user) { %>
      <a class="btn btn--primary" href="/auth/login?next=<%= encodeURIComponent(`/restaurants/${slug}`) %>">
        Log in to write a review
      </a>
    <% } else { %>
      <button id="toggleReviewBtn" class="btn btn--primary" type="button">Write a Review</button>
    <% } %>
  </div>

  <% if (user) { %>
  <form id="reviewForm" class="card hidden">
    <div class="form-grid">
      <!-- ⭐ Star picker replaces the numeric input -->
      <label>
        Rating
        <div id="starPicker" class="star-picker" aria-label="Choose rating from 1 to 5"></div>
        <input type="hidden" name="rating" id="ratingInput" required>
      </label>

      <label>
        Title
        <input class="input" type="text" name="title" maxlength="120" required>
      </label>

      <label>
        Body
        <textarea class="input" name="body" rows="4" required></textarea>
      </label>

      <div class="row-between gap-2">
        <button class="btn btn--primary" type="submit">Submit Review</button>
        <span id="reviewMsg" class="muted"></span>
      </div>
    </div>
  </form>
  <% } %>

  <div id="reviews"></div>
</section>


<script>
    // Smart "Back to Browse" that preserves filters & scroll
    (function () {
    const back = document.getElementById('backLink');
    if (!back) return;

    // If we navigated here from /restaurants, use real history back to keep filters + scroll
    try {
        const ref = document.referrer ? new URL(document.referrer) : null;
        const cameFromList = ref && /\/restaurants$/.test(ref.pathname);
        if (cameFromList) {
        back.addEventListener('click', (e) => { e.preventDefault(); history.back(); });
        return;
        }
    } catch {}

    // Otherwise, if this page URL has ?from=..., rebuild the browse URL with those filters
    const u = new URL(window.location.href);
    const from = u.searchParams.get('from');
    if (from) {
        back.href = '/restaurants?' + from;
    } else {
        back.href = '/restaurants'; // fallback
    }
    })();

  const restaurantEl = document.getElementById('restaurant');
  const reviewsEl    = document.getElementById('reviews');

  // helpers
  function esc(s){ return String(s ?? '').replace(/[&<>"']/g, c => ({'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;',"'":'&#39;'}[c])); }
  function stars(n){
    if (typeof n !== 'number' || isNaN(n)) return 'No reviews yet';
    const filled = '★'.repeat(Math.round(n));
    const empty  = '☆'.repeat(5 - Math.round(n));
    return `${filled}${empty} (${n})`;
  }
  function fmtDate(iso){ try { return new Date(iso).toLocaleDateString(); } catch { return ''; } }

  let CURRENT_RESTAURANT = null;

  function renderReviews(reviews) {
    if (!reviews.length) {
      reviewsEl.innerHTML = `<p class="muted">No reviews yet. Be the first to review!</p>`;
      return;
    }
    reviewsEl.innerHTML = `
      <ul style="list-style:none;padding:0;margin:0;">
        ${reviews.map(rv => `
          <li style="border:1px solid #eee;border-radius:8px;padding:12px;margin:10px 0;">
            <div style="display:flex;justify-content:space-between;gap:12px;align-items:baseline;">
              <strong>${esc(rv.title || '')}</strong>
              <span>${stars(rv.rating)}</span>
            </div>
            <p style="margin:.5rem 0;white-space:pre-wrap">${esc(rv.body || '')}</p>
            <div class="muted" style="font-size:.9rem;">
              ${esc(rv.userId?.name || rv.userId?.email || 'Anonymous')} • ${fmtDate(rv.createdAt)}
            </div>
          </li>
        `).join('')}
      </ul>
    `;
  }

  // ⭐ Tiny star picker
  function initStarPicker() {
    const picker = document.getElementById('starPicker');
    const input  = document.getElementById('ratingInput');
    if (!picker || !input) return;

    // create 5 clickable stars
    picker.innerHTML = Array.from({ length: 5 }, (_, i) =>
      `<span data-star="${i+1}" style="transition:color .12s ease;">☆</span>`
    ).join('');

    const stars = Array.from(picker.querySelectorAll('[data-star]'));
    let current = Number(input.value) || 0;

    const paint = (n) => {
      stars.forEach((el, idx) => {
        el.textContent = (idx < n) ? '★' : '☆';
        el.style.color = (idx < n) ? '#facc15' : '#bbb'; // amber-400 for filled
      });
    };

    picker.addEventListener('mousemove', (e) => {
      const target = e.target.closest('[data-star]');
      if (!target) return;
      paint(Number(target.dataset.star));
    });

    picker.addEventListener('mouseleave', () => paint(current));

    picker.addEventListener('click', (e) => {
      const target = e.target.closest('[data-star]');
      if (!target) return;
      current = Number(target.dataset.star);
      input.value = String(current);
      paint(current);
    });

    // default (no selection)
    paint(current);
  }

  function setupReviewForm() {
    const toggleBtn = document.getElementById('toggleReviewBtn');
    const form = document.getElementById('reviewForm');
    if (!toggleBtn || !form) return; // not logged in

    const msg = document.getElementById('reviewMsg');
    toggleBtn.addEventListener('click', () => {
      form.style.display = form.style.display === 'none' ? 'block' : 'none';
      msg.textContent = '';
      msg.style.color = '';
      if (form.style.display === 'block') {
        initStarPicker(); // ensure picker is ready when form opens
      }
    });

    form.addEventListener('submit', async (e) => {
      e.preventDefault();
      if (!CURRENT_RESTAURANT?._id) return;

      const ratingVal = Number(document.getElementById('ratingInput')?.value || 0);
      if (!ratingVal) {
        msg.style.color = '#b91c1c';
        msg.textContent = 'Please select a rating.';
        return;
      }

      msg.style.color = '';
      msg.textContent = 'Submitting...';
      const fd = new FormData(form);
      const payload = {
        rating: ratingVal, // ⭐ from the hidden input
        title: fd.get('title'),
        body: fd.get('body')
      };

      try {
        const res = await fetch(`/api/reviews/${CURRENT_RESTAURANT._id}`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          credentials: 'include',
          body: JSON.stringify(payload)
        });

        const data = await res.json().catch(() => ({}));

        if (res.status === 409) {
          msg.style.color = '#b91c1c';
          msg.textContent = data?.error || "You’ve already reviewed this restaurant.";
          return;
        }

        if (!res.ok) {
          msg.style.color = '#b91c1c';
          msg.textContent = data?.error || 'Error: could not save review.';
          return;
        }

        msg.style.color = '';
        msg.textContent = 'Thanks for your review!';
        await load();     // refresh header stats + review list
        form.reset();
        document.getElementById('ratingInput').value = ''; // clear rating
        form.style.display = 'none';
      } catch (err) {
        console.error(err);
        msg.style.color = '#b91c1c';
        msg.textContent = 'Network error. Please try again.';
      }
    });
  }

  async function load() {
    try {
      const slug = window.location.pathname.split('/').pop();
      const res  = await fetch(`/api/restaurants/${slug}`, { credentials: 'include' });
      if (!res.ok) throw new Error('Failed to load restaurant');
      const data = await res.json();

      const r = data.restaurant || {};
      CURRENT_RESTAURANT = r;

      restaurantEl.innerHTML = `
        <header style="margin:8px 0 16px;">
          <h1 style="margin:0 0 6px;">${esc(r.name || '')}</h1>
          <div class="muted">
            ${typeof r.avgRating === 'number' ? `★ ${r.avgRating} (${r.reviewCount || 0} review${(r.reviewCount||0)===1?'':'s'})` : 'No reviews yet'}
          </div>
          <div style="margin-top:8px;">
            ${esc(r.cuisine || '')} ${r.priceRange ? '• ' + esc(r.priceRange) : ''}<br>
            ${esc(r.address || '')}
          </div>
        </header>
      `;

      renderReviews(data.reviews || []);
      setupReviewForm();
    } catch (err) {
      console.error(err);
      restaurantEl.innerHTML = `<p style="color:#b91c1c;">Error loading restaurant.</p>`;
    }
  }

  load();
</script>

<%- include('../partials/footer') %>
